comment "#" ;
comment "//" ;
comment "/*" "*/" ;

Prog. Prog ::= Stmt ;

-- Declarations

DVal.  Decl  ::= Type Ident "=" Exp ;
DProc. Decl  ::= "proc" Ident "(" [Param] ")" "{" [Decl] Stmt "}" ;
Param. Param ::= Type Ident ;

separator  Param "," ;
terminator Decl ";" ;


-- Types

TInt.  Type ::= "int" ;
TBool. Type ::= "bool" ;

-- Statements

SSeq.   Stmt ::= Stmt ";" Stmt1 ;

SLeft.  Stmt1 ::= "left" Stmt1 ;
SRight. Stmt1 ::= "right" Stmt1 ;

SSkip.  Stmt1 ::= "skip" ;
SIf.    Stmt1 ::= "if" "(" Exp ")" "{" Stmt "}" ;
SIfte.  Stmt1 ::= "if" "(" Exp ")" "{" Stmt "}" "else" "{" Stmt "}" ;
STurn.  Stmt1 ::= "turn" ;
SExp.   Stmt1 ::= Exp ;
SPrint. Stmt1 ::= "print" Exp ;
SBlock. Stmt1 ::= "{" [Decl] Stmt "}" ;

SProc. Stmt ::= Ident "(" [Arg] ")" ;
AVal.  Arg  ::= Ident ;
ARef.  Arg  ::= "ref" Ident ;

separator Arg "," ;

coercions Stmt 1 ;

-- Expressions

EAss.     Exp ::= Ident OpAss Exp ;
OpAss.    OpAss ::= "=" ;
OpAddAss. OpAss ::= "+=" ;
OpSubAss. OpAss ::= "-=" ;
OpMulAss. OpAss ::= "*=" ;
OpDivAss. OpAss ::= "/=" ;
OpModAss. OpAss ::= "%=" ;

EIfte. Exp ::= Exp1 "?" Exp ":" Exp1 ;

EOr.  Exp1 ::= Exp1 "||" Exp2 ;

EAnd. Exp2 ::= Exp2 "&&" Exp3 ;

EComp. Exp3 ::= Exp3 OpComp Exp4 ;
OpEq.  OpComp ::= "==" ;
OpNeq. OpComp ::= "!=" ;

EOrd.  Exp4 ::= Exp4 OpOrd Exp5 ;
OpLT.  OpOrd ::= "<" ;
OpLEq. OpOrd ::= "<=" ;
OpGT.  OpOrd ::= ">" ;
OpGEq. OpOrd ::= ">=" ;

EAdd.    Exp5 ::= Exp5 OpAdd Exp6 ;
OpPlus.  OpAdd ::= "+" ;
OpMinus. OpAdd ::= "-" ;

EMul.    Exp6 ::= Exp6 OpMul Exp7 ;
OpTimes. OpMul ::= "*" ;
OpDiv.   OpMul ::= "/" ;
OpMod.   OpMul ::= "%" ;

EInv.  Exp7 ::= OpInv Exp8 ;
OpNot. OpInv ::= "!" ;
OpNeg. OpInv ::= "-" ;

EInt.   Exp8 ::= Integer ;
ETrue.  Exp8 ::= "true" ;
EFalse. Exp8 ::= "false" ;

EPreOp.  Exp8 ::= OpPrePost Ident ;
EPostOp. Exp8 ::= Ident OpPrePost ;
OpInc.   OpPrePost ::= "++" ;
OpDec.   OpPrePost ::= "--" ;

coercions Exp 8 ;

