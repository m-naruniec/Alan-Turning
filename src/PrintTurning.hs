{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintTurning.
--   Generated by the BNF converter.

module PrintTurning where

import AbsTurning
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ident where
  prt _ (Ident i) = doc (showString i)

instance Print Prog where
  prt i e = case e of
    Prog stmt -> prPrec i 0 (concatD [prt 0 stmt])

instance Print Decl where
  prt i e = case e of
    DSeq decl1 decl2 -> prPrec i 0 (concatD [prt 0 decl1, doc (showString ";"), prt 1 decl2])
    DDflt type_ id -> prPrec i 1 (concatD [prt 0 type_, prt 0 id])
    DVal type_ id exp -> prPrec i 1 (concatD [prt 0 type_, prt 0 id, doc (showString "="), prt 0 exp])
    DProc id params stmt -> prPrec i 1 (concatD [doc (showString "proc"), prt 0 id, doc (showString "("), prt 0 params, doc (showString ")"), doc (showString "{"), prt 0 stmt, doc (showString ";"), doc (showString "}")])

instance Print Param where
  prt i e = case e of
    Param type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Param] where
  prt = prtList

instance Print Type where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TBool -> prPrec i 0 (concatD [doc (showString "bool")])

instance Print Stmt where
  prt i e = case e of
    SSeq stmt1 stmt2 -> prPrec i 0 (concatD [prt 0 stmt1, doc (showString ";"), prt 1 stmt2])
    SLeft stmt -> prPrec i 1 (concatD [doc (showString "left"), prt 1 stmt])
    SRight stmt -> prPrec i 1 (concatD [doc (showString "right"), prt 1 stmt])
    SSkip -> prPrec i 1 (concatD [doc (showString "skip")])
    SIf exp stmt -> prPrec i 1 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 stmt, doc (showString ";"), doc (showString "}")])
    SIfte exp stmt1 stmt2 -> prPrec i 1 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 stmt1, doc (showString ";"), doc (showString "}"), doc (showString "else"), doc (showString "{"), prt 0 stmt2, doc (showString ";"), doc (showString "}")])
    STurn -> prPrec i 1 (concatD [doc (showString "turn")])
    SExp exp -> prPrec i 1 (concatD [prt 0 exp])
    SPrint exp -> prPrec i 1 (concatD [doc (showString "print"), prt 0 exp])
    SBlock decl stmt -> prPrec i 1 (concatD [doc (showString "{"), prt 0 decl, doc (showString ";"), doc (showString ":"), prt 0 stmt, doc (showString ";"), doc (showString "}")])
    SProc id args -> prPrec i 1 (concatD [prt 0 id, doc (showString "("), prt 0 args, doc (showString ")")])

instance Print Arg where
  prt i e = case e of
    AVal exp -> prPrec i 0 (concatD [prt 0 exp])
    ARef id -> prPrec i 0 (concatD [doc (showString "ref"), prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Arg] where
  prt = prtList

instance Print Exp where
  prt i e = case e of
    EAss id opass exp -> prPrec i 0 (concatD [prt 0 id, prt 0 opass, prt 0 exp])
    EIfte exp1 exp2 exp3 -> prPrec i 0 (concatD [prt 1 exp1, doc (showString "?"), prt 0 exp2, doc (showString ":"), prt 1 exp3])
    EOr exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "||"), prt 2 exp2])
    EAnd exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "&&"), prt 3 exp2])
    EComp exp1 opcomp exp2 -> prPrec i 3 (concatD [prt 3 exp1, prt 0 opcomp, prt 4 exp2])
    EOrd exp1 opord exp2 -> prPrec i 4 (concatD [prt 4 exp1, prt 0 opord, prt 5 exp2])
    EAdd exp1 opadd exp2 -> prPrec i 5 (concatD [prt 5 exp1, prt 0 opadd, prt 6 exp2])
    EMul exp1 opmul exp2 -> prPrec i 6 (concatD [prt 6 exp1, prt 0 opmul, prt 7 exp2])
    EInv opinv exp -> prPrec i 7 (concatD [prt 0 opinv, prt 8 exp])
    EVar id -> prPrec i 8 (concatD [prt 0 id])
    EInt n -> prPrec i 8 (concatD [prt 0 n])
    ETrue -> prPrec i 8 (concatD [doc (showString "True")])
    EFalse -> prPrec i 8 (concatD [doc (showString "False")])
    EPreOp opprepost id -> prPrec i 8 (concatD [prt 0 opprepost, prt 0 id])
    EPostOp id opprepost -> prPrec i 8 (concatD [prt 0 id, prt 0 opprepost])

instance Print OpAss where
  prt i e = case e of
    OpAss -> prPrec i 0 (concatD [doc (showString "=")])
    OpAddAss -> prPrec i 0 (concatD [doc (showString "+=")])
    OpSubAss -> prPrec i 0 (concatD [doc (showString "-=")])
    OpMulAss -> prPrec i 0 (concatD [doc (showString "*=")])
    OpDivAss -> prPrec i 0 (concatD [doc (showString "/=")])
    OpModAss -> prPrec i 0 (concatD [doc (showString "%=")])

instance Print OpComp where
  prt i e = case e of
    OpEq -> prPrec i 0 (concatD [doc (showString "==")])
    OpNEq -> prPrec i 0 (concatD [doc (showString "!=")])

instance Print OpOrd where
  prt i e = case e of
    OpLT -> prPrec i 0 (concatD [doc (showString "<")])
    OpLEq -> prPrec i 0 (concatD [doc (showString "<=")])
    OpGT -> prPrec i 0 (concatD [doc (showString ">")])
    OpGEq -> prPrec i 0 (concatD [doc (showString ">=")])

instance Print OpAdd where
  prt i e = case e of
    OpPlus -> prPrec i 0 (concatD [doc (showString "+")])
    OpMinus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print OpMul where
  prt i e = case e of
    OpTimes -> prPrec i 0 (concatD [doc (showString "*")])
    OpDiv -> prPrec i 0 (concatD [doc (showString "/")])
    OpMod -> prPrec i 0 (concatD [doc (showString "%")])

instance Print OpInv where
  prt i e = case e of
    OpNot -> prPrec i 0 (concatD [doc (showString "!")])
    OpNeg -> prPrec i 0 (concatD [doc (showString "-")])

instance Print OpPrePost where
  prt i e = case e of
    OpInc -> prPrec i 0 (concatD [doc (showString "++")])
    OpDec -> prPrec i 0 (concatD [doc (showString "--")])

