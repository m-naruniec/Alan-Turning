module SkelTurning where

-- Haskell module generated by the BNF converter

import AbsTurning
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProg :: Prog -> Result
transProg x = case x of
  Prog stmt -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DSeq decl1 decl2 -> failure x
  DDflt type_ ident -> failure x
  DVal type_ ident exp -> failure x
  DProc ident params stmt -> failure x
transParam :: Param -> Result
transParam x = case x of
  Param type_ ident -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TBool -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SSeq stmt1 stmt2 -> failure x
  SLeft stmt -> failure x
  SRight stmt -> failure x
  SSkip -> failure x
  SIf exp stmt -> failure x
  SIfte exp stmt1 stmt2 -> failure x
  STurn -> failure x
  SExp exp -> failure x
  SPrint exp -> failure x
  SBlock decl stmt -> failure x
  SProc ident args -> failure x
transArg :: Arg -> Result
transArg x = case x of
  AVal exp -> failure x
  ARef ident -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EAss ident opass exp -> failure x
  EIfte exp1 exp2 exp3 -> failure x
  EOr exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EComp exp1 opcomp exp2 -> failure x
  EOrd exp1 opord exp2 -> failure x
  EAdd exp1 opadd exp2 -> failure x
  EMul exp1 opmul exp2 -> failure x
  EInv opinv exp -> failure x
  EVar ident -> failure x
  EInt integer -> failure x
  ETrue -> failure x
  EFalse -> failure x
  EPreOp opprepost ident -> failure x
  EPostOp ident opprepost -> failure x
transOpAss :: OpAss -> Result
transOpAss x = case x of
  OpAss -> failure x
  OpAddAss -> failure x
  OpSubAss -> failure x
  OpMulAss -> failure x
  OpDivAss -> failure x
  OpModAss -> failure x
transOpComp :: OpComp -> Result
transOpComp x = case x of
  OpEq -> failure x
  OpNEq -> failure x
transOpOrd :: OpOrd -> Result
transOpOrd x = case x of
  OpLT -> failure x
  OpLEq -> failure x
  OpGT -> failure x
  OpGEq -> failure x
transOpAdd :: OpAdd -> Result
transOpAdd x = case x of
  OpPlus -> failure x
  OpMinus -> failure x
transOpMul :: OpMul -> Result
transOpMul x = case x of
  OpTimes -> failure x
  OpDiv -> failure x
  OpMod -> failure x
transOpInv :: OpInv -> Result
transOpInv x = case x of
  OpNot -> failure x
  OpNeg -> failure x
transOpPrePost :: OpPrePost -> Result
transOpPrePost x = case x of
  OpInc -> failure x
  OpDec -> failure x

