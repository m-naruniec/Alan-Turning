comment "#" ;
comment "//" ;
comment "/*" "*/" ;

Prog. Prog ::= Stmt ;
Prog. Prog ::= Stmt ";" ;

-- Declarations

DSeq.  Decl  ::= Decl ";" Decl1; --ok
DDflt. Decl1  ::= Type Ident ; --ok
DVal.  Decl1  ::= Type Ident "=" Exp ; --ok
DProc. Decl1  ::= "proc" Ident "(" [Param] ")" "{" Stmt ";" "}" ; --ok
Param. Param ::= Type Ident ; --ok

separator  Param "," ;

coercions Decl 1 ;

-- Types

TInt.  Type ::= "int" ;
TBool. Type ::= "bool" ;

-- Statements

SSeq.   Stmt ::= Stmt ";" Stmt1 ; --ok

SLeft.  Stmt1 ::= "left" Stmt1 ; --ok
SRight. Stmt1 ::= "right" Stmt1 ; --ok

SSkip.  Stmt1 ::= "skip" ; --ok
SIf.    Stmt1 ::= "if" "(" Exp ")" "{" Stmt ";" "}" ; --ok
SIfte.  Stmt1 ::= "if" "(" Exp ")" "{" Stmt ";" "}" "else" "{" Stmt ";" "}" ; --ok
STurn.  Stmt1 ::= "turn" ; --ok
SExp.   Stmt1 ::= Exp ; --ok
SPrint. Stmt1 ::= "print" Exp ; --ok
SBlock. Stmt1 ::= "{" Decl ":" Stmt ";" "}" ; --ok

SProc. Stmt1 ::= Ident "(" [Arg] ")" ; --ok
AVal.  Arg  ::= Exp ; --ok
ARef.  Arg  ::= "ref" Ident ; --ok

separator Arg "," ;

coercions Stmt 1 ;

-- Expressions

EAss.     Exp ::= Ident OpAss Exp ;
OpAss.    OpAss ::= "=" ;
OpAddAss. OpAss ::= "+=" ;
OpSubAss. OpAss ::= "-=" ;
OpMulAss. OpAss ::= "*=" ;
OpDivAss. OpAss ::= "/=" ;
OpModAss. OpAss ::= "%=" ;

EIfte. Exp ::= Exp1 "?" Exp ":" Exp1 ;

EOr.  Exp1 ::= Exp1 "||" Exp2 ; --ok

EAnd. Exp2 ::= Exp2 "&&" Exp3 ; --ok

EComp. Exp3 ::= Exp3 OpComp Exp4 ; --ok
OpEq.  OpComp ::= "==" ; --ok
OpNEq. OpComp ::= "!=" ; --ok

EOrd.  Exp4 ::= Exp4 OpOrd Exp5 ; --ok
OpLT.  OpOrd ::= "<" ; --ok
OpLEq. OpOrd ::= "<=" ; --ok
OpGT.  OpOrd ::= ">" ; --ok
OpGEq. OpOrd ::= ">=" ; --ok

EAdd.    Exp5 ::= Exp5 OpAdd Exp6 ; --ok
OpPlus.  OpAdd ::= "+" ; --ok
OpMinus. OpAdd ::= "-" ; --ok

EMul.    Exp6 ::= Exp6 OpMul Exp7 ; --ok
OpTimes. OpMul ::= "*" ; --ok
OpDiv.   OpMul ::= "/" ; --ok
OpMod.   OpMul ::= "%" ; --ok

EInv.  Exp7 ::= OpInv Exp8 ; --ok
OpNot. OpInv ::= "!" ; --ok
OpNeg. OpInv ::= "-" ; --ok

EVar.   Exp8 ::= Ident ; --ok
EInt.   Exp8 ::= Integer ; --ok
ETrue.  Exp8 ::= "True" ; --ok
EFalse. Exp8 ::= "False" ; --ok

EPreOp.  Exp8 ::= OpPrePost Ident ; --ok
EPostOp. Exp8 ::= Ident OpPrePost ; --ok
OpInc.   OpPrePost ::= "++" ; --ok
OpDec.   OpPrePost ::= "--" ; --ok

coercions Exp 8 ;

